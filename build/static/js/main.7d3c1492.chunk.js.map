{"version":3,"sources":["store/reducers/currentUser.js","store/reducers/index.js","store/actionTypes.js","store/reducers/error.js","store/reducers/messages.js","store/index.js","services/api.js","store/actions/errors.js","store/actions/auth.js","containers/Navbar.js","components/AuthForm.js","store/actions/messages.js","components/MessageItem.js","containers/MessageList.js","containers/Main.js","hocs/withAuth.js","containers/GuestBook.js","serviceWorker.js","index.js"],"names":["DEFAULT_STATE","isAuthenticated","user","rootReducer","combineReducers","currentUser","state","action","type","Object","keys","length","errors","message","error","messages","filter","_id","id","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","apiCall","method","path","data","Promise","resolve","reject","axios","then","res","catch","err","response","addError","removeError","setCurrentUser","setAuthorizationToken","token","defaults","headers","common","setTokenHeader","authUser","userData","dispatch","localStorage","setItem","Navbar","useSelector","useDispatch","to","username","onClick","e","preventDefault","clear","AuthForm","heading","buttonText","signUp","history","onAuth","useState","email","setEmail","setUsername","password","setPassword","handleChange","target","name","value","listen","className","onSubmit","replace","htmlFor","placeholder","onChange","updateMessage","userId","messageId","removeMessage","MessageItem","isCorrectUser","isUpdated","handleUpdate","updated","setUpdated","handleKeyDown","a","key","onKeyDown","data-key","getAttribute","MessageList","setMessage","setIsUpdated","currentUserId","useEffect","location","mTarget","m","push","messageList","map","getState","addNewMessage","Main","ComponentToBeRendered","exact","component","props","render","store","createStore","applyMiddleware","thunk","jwtToken","jwtDecode","GuestBook","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"6NAEMA,EAAgB,CAClBC,iBAAiB,EACjBC,KAAM,I,gBCOKC,EANKC,YAAgB,CAChCC,YDCW,WAAoC,IAAnCC,EAAkC,uDAA1BN,EAAeO,EAAW,uCAC9C,OAAQA,EAAOC,MACX,IEPwB,mBFQpB,MAAO,CACHP,kBAAmBQ,OAAOC,KAAKH,EAAOL,MAAMS,OAC5CT,KAAMK,EAAOL,MAErB,QACI,OAAOI,ICRfM,OELW,WAAsC,IAArCN,EAAoC,uDAA5B,CAACO,QAAS,MAAON,EAAW,uCAChD,OAAQA,EAAOC,MACX,IDJiB,YCKb,OAAO,2BAAIF,GAAX,IAAkBO,QAASN,EAAOO,QACtC,IDLoB,eCMhB,OAAO,2BAAIR,GAAX,IAAkBO,QAAS,OAC/B,QACI,OAAOP,IFDfS,SGNoB,WAAuB,IAAtBT,EAAqB,uDAAf,GAAIC,EAAW,uCAC1C,OAAQA,EAAOC,MACX,IFDqB,gBEEjB,OAAO,YAAID,EAAOQ,UACtB,IFFsB,iBEGlB,OAAOT,EAAMU,QAAO,SAAAH,GAAO,OAAIA,EAAQI,MAAQV,EAAOW,MAC1D,QACI,OAAOZ,M,QCLba,EAAkBC,OAAOC,sCAAwCC,I,oCCMhE,SAASC,EAAQC,EAAQC,EAAMC,GAClC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,OAAOC,IAAMN,GAAQC,EAAMC,GACtBK,MAAK,SAAAC,GACF,OAAOJ,EAAQI,EAAIN,SAEtBO,OAAM,SAAAC,GACH,OAAOL,EAAOK,EAAIC,SAAST,KAAKZ,aCdzC,IAAMsB,EAAW,SAAAtB,GAAK,MAAK,CAC9BN,KLJqB,YKKrBM,UAGSuB,EAAc,iBAAO,CAC9B7B,KLRwB,iBMKrB,SAAS8B,EAAepC,GAC3B,MAAO,CACHM,KNNwB,mBMOxBN,QAID,SAASqC,EAAsBC,IFX/B,SAAwBA,GACxBA,EACCV,IAAMW,SAASC,QAAQC,OAAvB,+BAA2DH,UAEpDV,IAAMW,SAASC,QAAQC,OAAvB,cEQXC,CAAeJ,GAGZ,SAASK,EAASrC,EAAMsC,GAC3B,OAAO,SAAAC,GACH,OAAO,IAAIpB,SAAQ,SAACC,EAASC,GACzB,OAAON,EAAQ,OAAD,oBAAsBf,GAAQsC,GACvCf,MAAK,YAAuB,IAArBS,EAAoB,EAApBA,MAAUtC,EAAU,yBACxB8C,aAAaC,QAAQ,WAAYT,GACjCD,EAAsBC,GACtBO,EAAST,EAAepC,IACxB6C,EDjBc,CAC9BvC,KLRwB,iBMyBRoB,OAEHK,OAAM,SAAAC,GACHa,EAASX,EAASF,EAAIrB,UACtBgB,WCzBpB,IAuCeqB,EAvCA,WACX,IAAM7C,EAAc8C,aAAY,SAAA7C,GAAK,OAAIA,EAAMD,eACzC0C,EAAWK,cAOjB,OACI,gCACI,6BACI,yBAAKlC,GAAG,SAAR,aACCb,EAAYJ,gBACT,4BACI,4BAEI,kBAAC,IAAD,CAAMoD,GAAG,KAAKhD,EAAYH,KAAKoD,WAEnC,4BACI,kBAAC,IAAD,CAAMC,QAhBf,SAAAC,GACXA,EAAEC,iBACFV,GD0BG,SAAAA,GACHC,aAAaU,QACbnB,GAAsB,GACtBQ,EAAST,EAAe,SCfmBe,GAAG,WAA1B,aAIR,4BACI,4BACI,kBAAC,IAAD,CAAMA,GAAG,WAAT,YAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,WAAT,e,eC0DbM,EA1FE,SAAC,GAAmF,IAAlFC,EAAiF,EAAjFA,QAASC,EAAwE,EAAxEA,WAAYC,EAA4D,EAA5DA,OAAQC,EAAoD,EAApDA,QAASnD,EAA2C,EAA3CA,OAAQyB,EAAmC,EAAnCA,YAAa2B,EAAsB,EAAtBA,OAAQjB,EAAc,EAAdA,SAAc,EACtEkB,mBAAS,IAD6D,mBACzFC,EADyF,KAClFC,EADkF,OAEhEF,mBAAS,IAFuD,mBAEzFX,EAFyF,KAE/Ec,EAF+E,OAGhEH,mBAAS,IAHuD,mBAGzFI,EAHyF,KAG/EC,EAH+E,KAK1FC,EAAe,SAAAf,GACjB,IAAIgB,EAAShB,EAAEgB,OAAOC,KAClBC,EAAQlB,EAAEgB,OAAOE,MAEP,UAAXF,GACCL,EAASO,GAGC,aAAXF,GACCF,EAAYI,GAGF,aAAXF,GACCJ,EAAYM,IAqBpB,OAJAX,EAAQY,QAAO,WACX5B,EAASV,MAIT,yBAAKuC,UAAU,aACX,wBAAIA,UAAU,eAAehB,GAC5BhD,EAAOC,SACJ,yBAAK+D,UAAU,iBAAiBhE,EAAOC,SAE3C,0BAAMgE,SAvBO,SAAArB,GACjBA,EAAEC,iBAKFV,EACIiB,EAJaF,EAAS,SAAW,SACpB,CAACI,QAAOZ,WAAUe,cAIjCtC,MAAK,WACHgC,EAAQe,QAAQ,QACjB7C,OAAM,gBAayB2C,UAAU,cACpC,yBAAKA,UAAU,SACX,2BAAOG,QAAQ,SAAf,UACA,2BACIvE,KAAK,QACLwE,YAAY,mBACZ9D,GAAG,QACHuD,KAAK,QACLC,MAAOR,EACPe,SAAUV,KAIlB,yBAAKK,UAAU,SACX,2BAAOG,QAAQ,YAAf,aACA,2BACIC,YAAY,WACZxE,KAAK,WACLU,GAAG,WACHuD,KAAK,WACLQ,SAAUV,KAGjBT,GACG,yBAAKc,UAAU,SACX,2BAAOG,QAAQ,YAAf,aACA,2BACIC,YAAY,WACZxE,KAAK,OACLU,GAAG,WACHuD,KAAK,WACLC,MAAOpB,EACP2B,SAAUV,KAItB,4BAAQ/D,KAAK,SAASoE,UAAU,WAC3Bf,MCnDRqB,EAAgB,SAAArE,GAAO,OAAI,SAACsE,EAAQC,GAC7C,OAAO7D,EAAQ,MAAD,qBAAsB4D,EAAtB,qBAAyCC,GAAa,CAACvE,YAChEkB,MAAK,eACLE,OAAM,SAAAC,GAAG,OAAIE,EAASF,EAAIrB,cAGtBwE,EAAgB,SAACF,EAAQC,GAClC,OAAO,SAAArC,GACH,OAAOxB,EAAQ,SAAD,qBAAyB4D,EAAzB,qBAA4CC,IACrDrD,MAAK,kBAAMgB,EAhCK,CACzBvC,KTP0B,iBSQ1BU,GA8BoCkE,OAC3BnD,OAAM,SAAAC,GAAG,OAAIa,EAASX,EAASF,EAAIrB,e,yBCYjCyE,EApDK,SAAC,GAEwC,IADzDpE,EACwD,EADxDA,GAAIL,EACoD,EADpDA,QAASyC,EAC2C,EAD3CA,SAAUiC,EACiC,EADjCA,cAAeC,EACkB,EADlBA,UAAWzC,EACO,EADPA,SACjDoC,EAAwD,EAAxDA,OAAQD,EAAgD,EAAhDA,cAAeO,EAAiC,EAAjCA,aAAcJ,EAAmB,EAAnBA,cAAmB,EAE1BpB,mBAAS,IAFiB,mBAEjDyB,EAFiD,KAExCC,EAFwC,KAYlDC,EAAa,uCAAG,WAAMpC,GAAN,SAAAqC,EAAA,yDACL,UAAVrC,EAAEsC,IADa,gCAERZ,EAAcQ,EAAdR,CAAuBC,EAAQjE,GAFvB,uBAGRuE,IAHQ,2CAAH,sDAWnB,OAAGF,GAAiBC,IAActE,EAE1B,wBAAI0D,UAAU,aACV,kBAAC,IAAD,CAAMvB,GAAG,KAAT,IAAeC,EAAf,SACA,2BACI9C,KAAK,OACLkE,MAAOgB,EACPT,SAAU,SAAAzB,GAAC,OAAImC,EAAWnC,EAAEgB,OAAOE,QACnCqB,UAAWH,KAMvB,wBAAIhB,UAAU,aACV,kBAAC,IAAD,CAAMvB,GAAG,KAAT,IAAeC,EAAf,SACA,2BAAIzC,GACH0E,GACG,6BACI,4BAAQS,WAAU9E,EAAI0D,UAAU,cAAcrB,QArCxC,SAAAC,GAClB,IAAItC,EAAKsC,EAAEgB,OAAOyB,aAAa,YAE/BN,EAAW9E,GACX4E,EAAavE,KAiCD,QACA,4BAAQ0D,UAAU,cAAcrB,QAxBtB,WACvBR,EAASsC,EAAcF,EAAQjE,MAuBlB,aC4BLgF,EAvEK,SAAC,GAAe,IAAdnC,EAAa,EAAbA,QAAa,EACDE,mBAAS,IADR,mBACxBpD,EADwB,KACfsF,EADe,OAEGlC,mBAAS,IAFZ,mBAExBuB,EAFwB,KAEbY,EAFa,KAIzBC,EAAgBlD,aAAY,SAAA7C,GAAK,OAAIA,EAAMD,YAAYH,KAAKgB,MAC5DH,EAAWoC,aAAY,SAAA7C,GAAK,OAAIA,EAAMS,YACtCgC,EAAWK,cAEjBkD,qBAAU,WACNvD,GFEG,SAAAA,GACH,OAAOxB,EAAQ,MAAO,iBACjBQ,MAAK,SAAAC,GAAG,OACLe,EAdyB,CACrCvC,KTHyB,gBSIzBO,SAYkCiB,OAEzBC,OAAM,SAAAC,GAAG,OAAIa,EAASX,EAASF,EAAIrB,kBELzC,CAACkD,EAAQwC,SAAST,MAErB,IASML,EAAe,SAACvE,GAClB,IAAIsF,EAAUzF,EAASC,QAAO,SAAAyF,GAAC,OAAIA,EAAExF,MAAQC,KAEtB,IAAnBsF,EAAQ7F,QACR6F,EAAUA,EAAQ,GAAGvF,IACrBmF,EAAaI,KAGbJ,EAAa,IACbrC,EAAQ2C,KAAK,OAIjBC,EAAc5F,EAAS6F,KAAI,SAAAH,GAAC,OAC5B,kBAAC,EAAD,CACIX,IAAKW,EAAExF,IACPC,GAAIuF,EAAExF,IACNkE,OAAQsB,EAAEvG,KAAKe,IACfJ,QAAS4F,EAAE5F,QACXyC,SAAUmD,EAAEvG,KAAKoD,SACjB+B,cAAeA,EACfE,cAAec,IAAkBI,EAAEvG,KAAKe,IACxCwE,aAAcA,EACdD,UAAWA,EACXN,cAAeA,EACfnC,SAAUA,OAIlB,OACI,yBAAK6B,UAAU,gBACX,0BAAMA,UAAU,yBAAyBC,SAxCxB,SAAArB,GACrBA,EAAEC,iBAEFV,EFIqB,SAAAlC,GAAO,OAAI,SAACkC,EAAU8D,GAAc,IAEvD1B,EADc0B,IAAfxG,YACsBH,KAAKgB,GAChC,OAAOK,EAAQ,OAAD,qBAAuB4D,EAAvB,aAA0C,CAACtE,YACpDkB,MAAK,eACLE,OAAM,SAAAC,GAAG,OAAIE,EAASF,EAAIrB,aETlBiG,CAAcjG,IAEvBsF,EAAW,IACXpC,EAAQ2C,KAAK,OAmCL,2BACI1B,YAAY,qBACZxE,KAAK,OACLkE,MAAO7D,EACPoE,SAAU,SAAAzB,GAAC,OAAI2C,EAAW3C,EAAEgB,OAAOE,UAEvC,4BAAQlE,KAAK,SAASoE,UAAU,WAAhC,oBAIJ,wBAAI1D,GAAG,YACFyF,KC7DjB,IA+CeI,EA/CF,WACT,ICP6BC,EDOvBpG,EAASuC,aAAY,SAAA7C,GAAK,OAAIA,EAAMM,UACpCmC,EAAWK,cAEjB,OACI,iCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO6D,OAAK,EAACxF,KAAK,IAAIyF,WCbLF,EDayBd,ECZjC,SAACiB,GAClB,IAAMlH,EAAkBkD,aAAY,SAAA7C,GAAK,OAAIA,EAAMD,YAAYJ,mBAQ/D,OANAqG,qBAAU,YACkB,IAApBrG,GACAkH,EAAMpD,QAAQ2C,KAAK,aAExB,CAACzG,IAEG,kBAAC+G,EAA0BG,ODI1B,kBAAC,IAAD,CACIF,OAAK,EACLxF,KAAK,UACL2F,OAAQ,SAAAD,GACJ,OACI,kBAAC,EAAD,eACI9E,YAAaA,EACbzB,OAAQA,EACRoD,OAAQnB,EACRgB,WAAW,SACXD,QAAQ,gBACRb,SAAUA,GACNoE,OAIpB,kBAAC,IAAD,CACIF,OAAK,EACLxF,KAAK,UACL2F,OAAQ,SAAAD,GACJ,OACI,kBAAC,EAAD,eACIrD,QAAM,EACNzB,YAAaU,EAASV,GACtBzB,OAAQA,EACRoD,OAAQnB,EACRgB,WAAW,WACXD,QAAQ,qBACRb,SAAUA,GACNoE,U,iBErC9BE,EXFKC,YACHnH,EACAgB,EAAgBoG,YAAgBC,OWExC,GAAIxE,aAAayE,SAAU,CACvBlF,EAAsBS,aAAayE,UACnC,IACIJ,EAAMtE,SAAST,EAAeoF,IAAU1E,aAAayE,YACvD,MAAOjE,GACL6D,EAAMtE,SAAST,EAAe,MAItC,IASeqF,EATG,kBACd,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SCZQO,QACW,cAA7BxG,OAAOmF,SAASsB,UAEe,UAA7BzG,OAAOmF,SAASsB,UAEhBzG,OAAOmF,SAASsB,SAASC,MACvB,2DCZNC,IAASX,OACP,kBAAC,IAAMY,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtG,MAAK,SAAAuG,GACJA,EAAaC,gBAEdtG,OAAM,SAAAnB,GACL0H,QAAQ1H,MAAMA,EAAMD,c","file":"static/js/main.7d3c1492.chunk.js","sourcesContent":["import {SET_CURRENT_USER} from '../actionTypes';\r\n\r\nconst DEFAULT_STATE = {\r\n    isAuthenticated: false,\r\n    user: {}\r\n};\r\n\r\nexport default (state = DEFAULT_STATE, action) => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                isAuthenticated: !!Object.keys(action.user).length,\r\n                user: action.user\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport currentUser from './currentUser';\r\nimport errors from './error';\r\nimport {messages} from './messages';\r\n\r\nconst rootReducer = combineReducers({\r\n    currentUser,\r\n    errors,\r\n    messages\r\n});\r\n\r\nexport default rootReducer;","export const ADD_ERROR = \"ADD_ERROR\";\r\nexport const REMOVE_ERROR = \"REMOVE_ERROR\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\nexport const LOAD_MESSAGES = \"LOAD_MESSAGES\";\r\nexport const REMOVE_MESSAGE = \"REMOVE_MESSAGE\";","import {ADD_ERROR,REMOVE_ERROR} from '../actionTypes';\r\n\r\nexport default (state = {message: null}, action) => {\r\n    switch (action.type) {\r\n        case ADD_ERROR:\r\n            return {...state, message: action.error};\r\n        case REMOVE_ERROR:\r\n            return {...state, message: null};\r\n        default:\r\n            return state;\r\n    }\r\n}","import {LOAD_MESSAGES, REMOVE_MESSAGE} from '../actionTypes';\r\n\r\nexport const messages = (state=[], action) => {\r\n    switch (action.type) {\r\n        case LOAD_MESSAGES:\r\n            return [...action.messages];\r\n        case REMOVE_MESSAGE:\r\n            return state.filter(message => message._id !== action.id);\r\n        default:\r\n            return state;\r\n    }\r\n}","import {applyMiddleware, compose, createStore} from 'redux';\r\nimport rootReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport function configureStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        composeEnhancer(applyMiddleware(thunk))\r\n    );\r\n}","import axios from 'axios';\r\n\r\nexport function setTokenHeader(token) {\r\n    if(token) {\r\n        axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n    } else {\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n}\r\n\r\nexport function apiCall(method, path, data) {\r\n    return new Promise((resolve, reject) => {\r\n        return axios[method](path, data)\r\n            .then(res => {\r\n                return resolve(res.data)\r\n            })\r\n            .catch(err => {\r\n                return reject(err.response.data.error);\r\n            })\r\n    });\r\n}\r\n","import {ADD_ERROR, REMOVE_ERROR} from '../actionTypes';\r\n\r\n// action creators for error\r\nexport const addError = error => ({\r\n    type: ADD_ERROR,\r\n    error\r\n});\r\n\r\nexport const removeError = () => ({\r\n    type: REMOVE_ERROR\r\n});","import {apiCall} from '../../services/api';\r\nimport {SET_CURRENT_USER} from '../actionTypes';\r\nimport {addError, removeError} from './errors';\r\nimport {setTokenHeader} from \"../../services/api\";\r\n\r\n// action creator for user\r\nexport function setCurrentUser(user) {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        user\r\n    };\r\n}\r\n\r\nexport function setAuthorizationToken(token) {\r\n    setTokenHeader(token);\r\n}\r\n\r\nexport function authUser(type, userData) {\r\n    return dispatch => {\r\n        return new Promise((resolve, reject) => {\r\n            return apiCall(\"post\", `/api/auth/${type}`, userData)\r\n                .then(({token, ...user}) => {\r\n                    localStorage.setItem(\"jwtToken\", token);\r\n                    setAuthorizationToken(token)\r\n                    dispatch(setCurrentUser(user));\r\n                    dispatch(removeError());\r\n                    resolve();\r\n                })\r\n                .catch(err => {\r\n                    dispatch(addError(err.message));\r\n                    reject();\r\n                });\r\n        })\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    return dispatch => {\r\n        localStorage.clear();\r\n        setAuthorizationToken(false);\r\n        dispatch(setCurrentUser({}));\r\n    }\r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {logout} from '../store/actions/auth';\r\n\r\nconst Navbar = () => {\r\n    const currentUser = useSelector(state => state.currentUser);\r\n    const dispatch = useDispatch();\r\n\r\n    const logOut = e => {\r\n        e.preventDefault();\r\n        dispatch(logout());\r\n    };\r\n    \r\n    return (\r\n        <header>\r\n            <nav>\r\n                <div id=\"brand\">GuestBook</div>\r\n                {currentUser.isAuthenticated ? (\r\n                    <ul>\r\n                        <li>\r\n                            {/*<Link to={`/users/${this.props.currentUser.user.id}/messages/new`}>New Message</Link>*/}\r\n                            <Link to='/'>{currentUser.user.username}</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link onClick={logOut} to=\"/signin\">Log out</Link>\r\n                        </li>\r\n                    </ul>\r\n                ) : (\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/signup\">Sign up</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/signin\">Log in</Link>\r\n                        </li>\r\n                    </ul>\r\n                )}\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Navbar;","import React, {useState} from 'react';\r\n\r\nconst AuthForm = ({heading, buttonText, signUp, history, errors, removeError, onAuth, dispatch}) => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const handleChange = e => {\r\n        let target = e.target.name;\r\n        let value = e.target.value;\r\n\r\n        if(target === 'email'){\r\n            setEmail(value)\r\n        }\r\n        \r\n        if(target === 'password') {\r\n            setPassword(value);\r\n        }\r\n\r\n        if(target === 'username') {\r\n            setUsername(value);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const authType = signUp ? \"signup\" : \"signin\";\r\n        const userData = {email, username, password};\r\n\r\n        dispatch(\r\n            onAuth(authType, userData)\r\n        ).then(() => {\r\n            history.replace(\"/\");\r\n        }).catch(() => {})\r\n    };\r\n\r\n    history.listen(() => {\r\n        dispatch(removeError);\r\n    });\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2 className=\"description\">{heading}</h2>\r\n            {errors.message && (\r\n                <div className=\"error-message\">{errors.message}</div>\r\n            )}\r\n            <form onSubmit={handleSubmit} className=\"guest-form\">\r\n                <div className=\"field\">\r\n                    <label htmlFor=\"email\">Email:</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder=\"Enter your email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        value={email}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"field\">\r\n                    <label htmlFor=\"password\">Password:</label>\r\n                    <input\r\n                        placeholder=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        name=\"password\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                {signUp && (\r\n                    <div className=\"field\">\r\n                        <label htmlFor=\"username\">Username:</label>\r\n                        <input\r\n                            placeholder=\"Username\"\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={handleChange}\r\n                        />\r\n                    </div>\r\n                )}\r\n                <button type=\"submit\" className=\"btn-new\">\r\n                    {buttonText}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AuthForm;","import {apiCall} from '../../services/api';\r\nimport {addError} from './errors';\r\nimport {LOAD_MESSAGES, REMOVE_MESSAGE} from '../actionTypes';\r\n\r\n// action creator for messages\r\nexport const loadMessages = messages => ({\r\n    type: LOAD_MESSAGES,\r\n    messages\r\n});\r\n\r\nexport const remove = id => ({\r\n    type: REMOVE_MESSAGE,\r\n    id\r\n});\r\n\r\nexport const fetchMessages = () => {\r\n    return dispatch => {\r\n        return apiCall(\"get\", '/api/messages')\r\n            .then(res =>\r\n                dispatch(loadMessages(res))\r\n            )\r\n            .catch(err => dispatch(addError(err.message)))\r\n    }\r\n};\r\n\r\nexport const addNewMessage = message => (dispatch, getState) => {\r\n    let {currentUser} = getState();\r\n    const userId = currentUser.user.id;\r\n    return apiCall(\"post\", `/api/users/${userId}/messages`, {message})\r\n        .then(() => {})\r\n        .catch(err => addError(err.message));\r\n};\r\n\r\nexport const updateMessage = message => (userId, messageId) => {\r\n    return apiCall(\"put\", `/api/users/${userId}/messages/${messageId}`, {message})\r\n        .then(() => {})\r\n        .catch(err => addError(err.message));\r\n};\r\n\r\nexport const removeMessage = (userId, messageId) => {\r\n    return dispatch => {\r\n        return apiCall(\"delete\", `/api/users/${userId}/messages/${messageId}`)\r\n            .then(() => dispatch(remove(messageId)))\r\n            .catch(err => dispatch(addError(err.message)));\r\n    }\r\n};","import React, {useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst MessageItem = ({\r\n    id, message, username, isCorrectUser, isUpdated, dispatch,\r\n    userId, updateMessage, handleUpdate, removeMessage}) => {\r\n\r\n    const [updated, setUpdated] = useState('');\r\n\r\n    // get right messageItem with it's value\r\n    const handleChange =  e => {\r\n        let id = e.target.getAttribute(\"data-key\");\r\n\r\n        setUpdated(message);\r\n        handleUpdate(id);\r\n    };\r\n\r\n    const handleKeyDown = async e => {\r\n        if(e.key === 'Enter') {\r\n            await updateMessage(updated)(userId, id);\r\n            await handleUpdate();\r\n        }\r\n    };\r\n\r\n    const handleClickRemove = () => {\r\n       dispatch(removeMessage(userId, id));\r\n    }\r\n\r\n    if(isCorrectUser && isUpdated === id) {\r\n        return (\r\n            <li className=\"list-item\">\r\n                <Link to='/'>@{username} &nbsp;</Link>\r\n                <input\r\n                    type=\"text\"\r\n                    value={updated}\r\n                    onChange={e => setUpdated(e.target.value)}\r\n                    onKeyDown={handleKeyDown}\r\n                />\r\n            </li>\r\n        )\r\n    }\r\n    return (\r\n        <li className=\"list-item\">\r\n            <Link to='/'>@{username} &nbsp;</Link>\r\n            <p>{message}</p>\r\n            {isCorrectUser && (\r\n                <div>\r\n                    <button data-key={id} className=\"btn-message\" onClick={handleChange}>edit</button>\r\n                    <button className=\"btn-message\" onClick={handleClickRemove}>delete</button>\r\n                </div>\r\n            )}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default MessageItem;","import React, {useState, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {fetchMessages, addNewMessage, updateMessage, removeMessage} from '../store/actions/messages';\r\nimport MessageItem from '../components/MessageItem';\r\n\r\nconst MessageList = ({history}) => {\r\n    const [message, setMessage] = useState(\"\");\r\n    const [isUpdated, setIsUpdated] = useState(\"\");\r\n\r\n    const currentUserId = useSelector(state => state.currentUser.user.id);\r\n    const messages = useSelector(state => state.messages);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchMessages());\r\n\r\n    }, [history.location.key])\r\n\r\n    const handleNewMessage = e => {\r\n        e.preventDefault();\r\n        \r\n        dispatch(addNewMessage(message));\r\n\r\n        setMessage(\"\");\r\n        history.push('/');\r\n    };\r\n\r\n    const handleUpdate = (id) => {\r\n        let mTarget = messages.filter(m => m._id === id);\r\n\r\n        if (mTarget.length !== 0) {\r\n            mTarget = mTarget[0]._id;\r\n            setIsUpdated(mTarget)\r\n\r\n        } else {\r\n            setIsUpdated(\"\");\r\n            history.push('/');\r\n        }\r\n    };\r\n\r\n    let messageList = messages.map(m=> (\r\n        <MessageItem\r\n            key={m._id}\r\n            id={m._id}\r\n            userId={m.user._id}\r\n            message={m.message}\r\n            username={m.user.username}\r\n            removeMessage={removeMessage}\r\n            isCorrectUser={currentUserId === m.user._id}\r\n            handleUpdate={handleUpdate}\r\n            isUpdated={isUpdated}\r\n            updateMessage={updateMessage}\r\n            dispatch={dispatch}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <div className=\"message-list\">\r\n            <form className=\"container message-form\" onSubmit={handleNewMessage}>\r\n                <input\r\n                    placeholder=\"Write your message\"\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={e => setMessage(e.target.value) }\r\n                />\r\n                <button type=\"submit\" className=\"btn-new\">\r\n                    Add my message!\r\n                </button>\r\n            </form>\r\n            <ul id=\"messages\">\r\n                {messageList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessageList;","import React from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport AuthForm from '../components/AuthForm';\r\nimport {authUser} from '../store/actions/auth';\r\nimport {removeError} from \"../store/actions/errors\";\r\nimport MessageList from './MessageList';\r\nimport withAuth from \"../hocs/withAuth\";\r\n\r\nconst Main = () => {\r\n    const errors = useSelector(state => state.errors);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <section>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={withAuth(MessageList)} />\r\n                <Route\r\n                    exact\r\n                    path=\"/signin\"\r\n                    render={props => {\r\n                        return (\r\n                            <AuthForm\r\n                                removeError={removeError}\r\n                                errors={errors}\r\n                                onAuth={authUser}\r\n                                buttonText=\"Log in\"\r\n                                heading=\"Welcome Back.\"\r\n                                dispatch={dispatch}\r\n                                {...props} />\r\n                        );\r\n                    }}\r\n                />\r\n                <Route\r\n                    exact\r\n                    path=\"/signup\"\r\n                    render={props => {\r\n                        return (\r\n                            <AuthForm\r\n                                signUp\r\n                                removeError={dispatch(removeError)}\r\n                                errors={errors}\r\n                                onAuth={authUser}\r\n                                buttonText=\"Sign up!\"\r\n                                heading=\"Join To GuestBook.\"\r\n                                dispatch={dispatch}\r\n                                {...props}\r\n                            />\r\n                        );\r\n                    }}\r\n                />\r\n            </Switch>\r\n        </section>\r\n    )\r\n};\r\n\r\nexport default Main;","import React, {useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\n\r\nexport default function withAuth(ComponentToBeRendered) {\r\n    const Authenticate = (props) => {\r\n        const isAuthenticated = useSelector(state => state.currentUser.isAuthenticated);\r\n\r\n        useEffect(() => {\r\n            if (isAuthenticated === false) {\r\n                props.history.push('/signin');\r\n            }\r\n        }, [isAuthenticated])\r\n        \r\n        return <ComponentToBeRendered {...props} />\r\n    }\r\n\r\n\r\n    return Authenticate;\r\n}","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {configureStore} from '../store';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport Main from './Main';\r\nimport {setAuthorizationToken, setCurrentUser} from \"../store/actions/auth\";\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst store = configureStore();\r\n\r\nif (localStorage.jwtToken) {\r\n    setAuthorizationToken(localStorage.jwtToken);\r\n    try {\r\n        store.dispatch(setCurrentUser(jwtDecode(localStorage.jwtToken)));\r\n    } catch (e) {\r\n        store.dispatch(setCurrentUser({}));\r\n    }\r\n}\r\n\r\nconst GuestBook = () => (\r\n    <Provider store={store}>\r\n        <Router>\r\n            <Navbar/>\r\n            <Main />\r\n        </Router>\r\n    </Provider>\r\n);\r\n\r\nexport default GuestBook;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GuestBook from './containers/GuestBook';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GuestBook />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}