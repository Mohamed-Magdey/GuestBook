{"version":3,"sources":["store/reducers/currentUser.js","store/reducers/index.js","store/actionTypes.js","store/reducers/error.js","store/reducers/messages.js","store/index.js","services/api.js","store/actions/errors.js","store/actions/auth.js","containers/Navbar.js","components/AuthForm.js","store/actions/messages.js","components/MessageItem.js","containers/MessageList.js","hocs/withAuth.js","containers/Main.js","containers/GuestBook.js","serviceWorker.js","index.js"],"names":["DEFAULT_STATE","isAuthenticated","user","rootReducer","combineReducers","currentUser","state","action","type","Object","keys","length","errors","message","error","messages","filter","_id","id","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","apiCall","method","path","data","Promise","resolve","reject","axios","then","res","catch","err","response","addError","removeError","setCurrentUser","setAuthorizationToken","token","defaults","headers","common","setTokenHeader","Navbar","logout","e","preventDefault","props","history","push","this","to","username","onClick","href","Component","withRouter","connect","dispatch","localStorage","clear","AuthForm","handleChange","setState","target","name","value","handleSubmit","authType","signUp","onAuth","email","password","heading","buttonText","listen","className","onSubmit","htmlFor","placeholder","onChange","updateMessage","userId","messageId","MessageItem","getAttribute","prevState","prevProps","updated","handleUpdate","handleKeyDown","a","key","removeMessage","isCorrectUser","isUpdated","onKeyDown","data-key","MessageList","handleNewMessage","addNewMessage","mTarget","m","updatedMessage","fetchMessages","currentUserId","messageList","map","bind","getState","withAuth","ComponentToBeRendered","Authenticate","nextProps","authUser","userData","setItem","exact","component","render","store","createStore","applyMiddleware","thunk","jwtToken","jwtDecode","GuestBook","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.dee0377b.chunk.js","sourcesContent":["import {SET_CURRENT_USER} from '../actionTypes';\r\n\r\nconst DEFAULT_STATE = {\r\n    isAuthenticated: false,\r\n    user: {}\r\n};\r\n\r\nexport default (state = DEFAULT_STATE, action) => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                isAuthenticated: !!Object.keys(action.user).length,\r\n                user: action.user\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport currentUser from './currentUser';\r\nimport errors from './error';\r\nimport {messages} from './messages';\r\n\r\nconst rootReducer = combineReducers({\r\n    currentUser,\r\n    errors,\r\n    messages\r\n});\r\n\r\nexport default rootReducer;","export const ADD_ERROR = \"ADD_ERROR\";\r\nexport const REMOVE_ERROR = \"REMOVE_ERROR\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\nexport const LOAD_MESSAGES = \"LOAD_MESSAGES\";\r\nexport const REMOVE_MESSAGE = \"REMOVE_MESSAGE\";","import {ADD_ERROR,REMOVE_ERROR} from '../actionTypes';\r\n\r\nexport default (state = {message: null}, action) => {\r\n    switch (action.type) {\r\n        case ADD_ERROR:\r\n            return {...state, message: action.error};\r\n        case REMOVE_ERROR:\r\n            return {...state, message: null};\r\n        default:\r\n            return state;\r\n    }\r\n}","import {LOAD_MESSAGES, REMOVE_MESSAGE} from '../actionTypes';\r\n\r\nexport const messages = (state=[], action) => {\r\n    switch (action.type) {\r\n        case LOAD_MESSAGES:\r\n            return [...action.messages];\r\n        case REMOVE_MESSAGE:\r\n            return state.filter(message => message._id !== action.id);\r\n        default:\r\n            return state;\r\n    }\r\n}","import {applyMiddleware, compose, createStore} from 'redux';\r\nimport rootReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport function configureStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        composeEnhancer(applyMiddleware(thunk))\r\n    );\r\n}","import axios from 'axios';\r\n\r\nexport function setTokenHeader(token) {\r\n    if(token) {\r\n        axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n    } else {\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n}\r\n\r\nexport function apiCall(method, path, data) {\r\n    return new Promise((resolve, reject) => {\r\n        return axios[method](path, data)\r\n            .then(res => {\r\n                return resolve(res.data)\r\n            })\r\n            .catch(err => {\r\n                return reject(err.response.data.error);\r\n            })\r\n    });\r\n}\r\n","import {ADD_ERROR, REMOVE_ERROR} from '../actionTypes';\r\n\r\n// action creators for error\r\nexport const addError = error => ({\r\n    type: ADD_ERROR,\r\n    error\r\n});\r\n\r\nexport const removeError = () => ({\r\n    type: REMOVE_ERROR\r\n});","import {apiCall} from '../../services/api';\r\nimport {SET_CURRENT_USER} from '../actionTypes';\r\nimport {addError, removeError} from './errors';\r\nimport {setTokenHeader} from \"../../services/api\";\r\n\r\n// action creator for user\r\nexport function setCurrentUser(user) {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        user\r\n    };\r\n}\r\n\r\nexport function setAuthorizationToken(token) {\r\n    setTokenHeader(token);\r\n}\r\n\r\nexport function authUser(type, userData) {\r\n    return dispatch => {\r\n        return new Promise((resolve, reject) => {\r\n            return apiCall(\"post\", `/api/auth/${type}`, userData)\r\n                .then(({token, ...user}) => {\r\n                    localStorage.setItem(\"jwtToken\", token);\r\n                    setAuthorizationToken(token)\r\n                    dispatch(setCurrentUser(user));\r\n                    dispatch(removeError());\r\n                    resolve();\r\n                })\r\n                .catch(err => {\r\n                    dispatch(addError(err.message));\r\n                    reject();\r\n                });\r\n        })\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    return dispatch => {\r\n        localStorage.clear();\r\n        setAuthorizationToken(false);\r\n        dispatch(setCurrentUser({}));\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {logout} from '../store/actions/auth';\r\n\r\nclass Navbar extends Component {\r\n    logout = e => {\r\n        e.preventDefault();\r\n        this.props.logout();\r\n        this.props.history.push('/signin');\r\n    };\r\n    render() {\r\n        return (\r\n            <header>\r\n                <nav>\r\n                    <div id=\"brand\">GuestBook</div>\r\n                    {this.props.currentUser.isAuthenticated ? (\r\n                        <ul>\r\n                            <li>\r\n                                {/*<Link to={`/users/${this.props.currentUser.user.id}/messages/new`}>New Message</Link>*/}\r\n                                <Link to='/'>{this.props.currentUser.user.username}</Link>\r\n                            </li>\r\n                            <li>\r\n                                <a onClick={this.logout} href=\"/signin\">Log out</a>\r\n                            </li>\r\n                        </ul>\r\n                    ) : (\r\n                        <ul>\r\n                            <li>\r\n                                <Link to=\"/signup\">Sign up</Link>\r\n                            </li>\r\n                            <li>\r\n                                <Link to=\"/signin\">Log in</Link>\r\n                            </li>\r\n                        </ul>\r\n                    )}\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        currentUser: state.currentUser\r\n    };\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, {logout})(Navbar));","import React, {Component} from 'react';\r\n\r\nexport default class AuthForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n        };\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        const authType = this.props.signUp ? \"signup\" : \"signin\";\r\n        this.props\r\n            .onAuth(authType, this.state)\r\n            .then(() => {\r\n                this.props.history.push(\"/\");\r\n            })\r\n            .catch(() => {})\r\n    };\r\n\r\n    render() {\r\n        const {email, username} = this.state;\r\n        const {heading, buttonText, signUp, history, errors, removeError} = this.props;\r\n\r\n        history.listen(() => {\r\n            removeError();\r\n        });\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h2 className=\"description\">{heading}</h2>\r\n                {errors.message && (\r\n                    <div className=\"error-message\">{errors.message}</div>\r\n                )}\r\n                <form onSubmit={this.handleSubmit} className=\"guest-form\">\r\n                    <div className=\"field\">\r\n                        <label htmlFor=\"email\">Email:</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            placeholder=\"Enter your email\"\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            value={email}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"field\">\r\n                        <label htmlFor=\"password\">Password:</label>\r\n                        <input\r\n                            placeholder=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    {signUp && (\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"username\">Username:</label>\r\n                            <input\r\n                                placeholder=\"Username\"\r\n                                type=\"text\"\r\n                                id=\"username\"\r\n                                name=\"username\"\r\n                                value={username}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    <button type=\"submit\" className=\"btn-new\">\r\n                        {buttonText}\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {apiCall} from '../../services/api';\r\nimport {addError} from './errors';\r\nimport {LOAD_MESSAGES, REMOVE_MESSAGE} from '../actionTypes';\r\n\r\n// action creator for messages\r\nexport const loadMessages = messages => ({\r\n    type: LOAD_MESSAGES,\r\n    messages\r\n});\r\n\r\nexport const remove = id => ({\r\n    type: REMOVE_MESSAGE,\r\n    id\r\n});\r\n\r\nexport const fetchMessages = () => {\r\n    return dispatch => {\r\n        return apiCall(\"get\", '/api/messages')\r\n            .then(res =>\r\n                dispatch(loadMessages(res))\r\n            )\r\n            .catch(err => dispatch(addError(err.message)))\r\n    }\r\n};\r\n\r\nexport const addNewMessage = message => (dispatch, getState) => {\r\n    let {currentUser} = getState();\r\n    const userId = currentUser.user.id;\r\n    return apiCall(\"post\", `/api/users/${userId}/messages`, {message})\r\n        .then(() => {})\r\n        .catch(err => addError(err.message));\r\n};\r\n\r\nexport const updateMessage = message => (userId, messageId) => {\r\n    return apiCall(\"put\", `/api/users/${userId}/messages/${messageId}`, {message})\r\n        .then(() => {})\r\n        .catch(err => addError(err.message));\r\n};\r\n\r\nexport const removeMessage = (userId, messageId) => {\r\n    return dispatch => {\r\n        return apiCall(\"delete\", `/api/users/${userId}/messages/${messageId}`)\r\n            .then(() => dispatch(remove(messageId)))\r\n            .catch(err => dispatch(addError(err.message)));\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass MessageItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            updated: ''\r\n        }\r\n    }\r\n\r\n    // get right messageItem with it's value\r\n    handleChange =  e => {\r\n        let id = e.target.getAttribute(\"data-key\");\r\n        this.setState((prevState, prevProps) => {\r\n            return {updated: prevProps.message}\r\n        })\r\n        this.props.handleUpdate(id);\r\n    };\r\n\r\n    handleKeyDown = async e => {\r\n        if(e.key === 'Enter') {\r\n            await this.props.updateMessage(this.state.updated)(this.props.userId, this.props.id);\r\n            await this.props.handleUpdate();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {id, message, username, removeMessage, isCorrectUser, isUpdated} = this.props;\r\n        const {updated} = this.state;\r\n\r\n        if(isCorrectUser && isUpdated === id) {\r\n            return (\r\n                <li className=\"list-item\">\r\n                    <Link to='/'>@{username} &nbsp;</Link>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={updated}\r\n                        onChange={e => this.setState({updated: e.target.value})}\r\n                        onKeyDown={this.handleKeyDown}\r\n                    />\r\n                </li>\r\n            )\r\n        }\r\n        return (\r\n            <li className=\"list-item\">\r\n                <Link to='/'>@{username} &nbsp;</Link>\r\n                <p>{message}</p>\r\n                {isCorrectUser && (\r\n                    <div>\r\n                        <button data-key={id} className=\"btn-message\" onClick={this.handleChange}>edit</button>\r\n                        <button className=\"btn-message\" onClick={removeMessage}>delete</button>\r\n                    </div>\r\n                )}\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageItem;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {fetchMessages, addNewMessage, updateMessage, removeMessage} from '../store/actions/messages';\r\nimport MessageItem from '../components/MessageItem';\r\n\r\nclass MessageList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: \"\",\r\n            updatedMessage: \"\",\r\n            isUpdated: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchMessages();\r\n    }\r\n\r\n    handleNewMessage = async e => {\r\n        e.preventDefault();\r\n        await this.props.addNewMessage(this.state.message);\r\n        this.setState({message: \"\"}, () => {\r\n            this.props.history.push('/');\r\n        });\r\n    };\r\n\r\n    handleUpdate = (id) => {\r\n        let mTarget = this.props.messages.filter(m => m._id === id);\r\n\r\n        if (mTarget.length !== 0) {\r\n            mTarget = mTarget[0]._id;\r\n            this.setState({isUpdated: mTarget});\r\n\r\n        } else {\r\n            this.setState({isUpdated:  ''}, () => {\r\n                this.props.history.push('/');\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {messages, removeMessage, currentUserId} = this.props;\r\n\r\n        let messageList = messages.map(m=> (\r\n            <MessageItem\r\n                key={m._id}\r\n                id={m._id}\r\n                userId={m.user._id}\r\n                message={m.message}\r\n                username={m.user.username}\r\n                removeMessage={removeMessage.bind(this, m.user._id, m._id)}\r\n                isCorrectUser={currentUserId === m.user._id}\r\n                handleUpdate={this.handleUpdate.bind(this)}\r\n                isUpdated={this.state.isUpdated}\r\n                updateMessage={updateMessage.bind(this)}\r\n            />\r\n        ));\r\n\r\n        return (\r\n            <div className=\"message-list\">\r\n                <form className=\"container message-form\" onSubmit={this.handleNewMessage}>\r\n                    <input\r\n                        placeholder=\"Write your message\"\r\n                        type=\"text\"\r\n                        value={this.state.message}\r\n                        onChange={e => this.setState({message: e.target.value})}\r\n                    />\r\n                    <button type=\"submit\" className=\"btn-new\">\r\n                        Add my message!\r\n                    </button>\r\n                </form>\r\n                <ul id=\"messages\">\r\n                    {messageList}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        currentUserId: state.currentUser.user.id,\r\n        messages: state.messages,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchMessages, addNewMessage, updateMessage, removeMessage})(MessageList);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nexport default function withAuth(ComponentToBeRendered) {\r\n    class Authenticate extends Component {\r\n        UNSAFE_componentWillMount() {\r\n            if (this.props.isAuthenticated === false) {\r\n                this.props.history.push('/signin');\r\n            }\r\n        }\r\n        UNSAFE_componentWillUpdate(nextProps) {\r\n            if (nextProps.isAuthenticated === false) {\r\n                nextProps.history.push('/signin');\r\n            }\r\n        }\r\n        render() {\r\n            return <ComponentToBeRendered {...this.props} />\r\n        }\r\n    }\r\n\r\n    function mapStateToProps(state) {\r\n        return {\r\n            isAuthenticated: state.currentUser.isAuthenticated\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToProps, null)(Authenticate);\r\n}","import React from 'react';\r\nimport {Switch, Route, withRouter} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport AuthForm from '../components/AuthForm';\r\nimport {authUser} from '../store/actions/auth';\r\nimport {removeError} from \"../store/actions/errors\";\r\nimport MessageList from './MessageList';\r\nimport withAuth from \"../hocs/withAuth\";\r\n\r\nconst Main = props => {\r\n    const {authUser, errors, removeError} = props;\r\n    return (\r\n        <section>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={withAuth(MessageList)} />\r\n                <Route\r\n                    exact\r\n                    path=\"/signin\"\r\n                    render={props => {\r\n                        return (\r\n                            <AuthForm\r\n                                removeError={removeError}\r\n                                errors={errors}\r\n                                onAuth={authUser}\r\n                                buttonText=\"Log in\"\r\n                                heading=\"Welcome Back.\"\r\n                                {...props} />\r\n                        );\r\n                    }}\r\n                />\r\n                <Route\r\n                    exact\r\n                    path=\"/signup\"\r\n                    render={props => {\r\n                        return (\r\n                            <AuthForm\r\n                                signUp\r\n                                removeError={removeError}\r\n                                errors={errors}\r\n                                onAuth={authUser}\r\n                                buttonText=\"Sign up!\"\r\n                                heading=\"Join To GuestBook.\"\r\n                                {...props}\r\n                            />\r\n                        );\r\n                    }}\r\n                />\r\n            </Switch>\r\n        </section>\r\n    )\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        currentUser: state.currentUser,\r\n        errors: state.errors\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, {authUser, removeError})(Main));","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {configureStore} from '../store';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport Main from './Main';\r\nimport {setAuthorizationToken, setCurrentUser} from \"../store/actions/auth\";\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst store = configureStore();\r\n\r\nif (localStorage.jwtToken) {\r\n    setAuthorizationToken(localStorage.jwtToken);\r\n    try {\r\n        store.dispatch(setCurrentUser(jwtDecode(localStorage.jwtToken)));\r\n    } catch (e) {\r\n        store.dispatch(setCurrentUser({}));\r\n    }\r\n}\r\n\r\nconst GuestBook = () => (\r\n    <Provider store={store}>\r\n        <Router>\r\n            <Navbar/>\r\n            <Main />\r\n        </Router>\r\n    </Provider>\r\n);\r\n\r\nexport default GuestBook;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GuestBook from './containers/GuestBook';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GuestBook />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}